// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sports.Model;

#nullable disable

namespace Sports.Migrations
{
    [DbContext(typeof(DB))]
    [Migration("20250802221147_ChangeReports")]
    partial class ChangeReports
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Sports.Model.Academy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademyCountry")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AcademyEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AcademyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AcademyPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AcademyPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AdditionalEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("AdditionalPhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("AdditionalShoesColor")
                        .HasColumnType("longtext");

                    b.Property<string>("AdditionalShortColor")
                        .HasColumnType("longtext");

                    b.Property<string>("AdditionalTShirtColor")
                        .HasColumnType("longtext");

                    b.Property<string>("LogoURL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ShoesColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ShortColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Statue")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TShirtColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("academyManagerName")
                        .HasColumnType("longtext");

                    b.Property<bool?>("under12")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("under14")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("under16")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AcademyEmail")
                        .IsUnique();

                    b.ToTable("academies", (string)null);
                });

            modelBuilder.Entity("Sports.Model.Camp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Time")
                        .HasColumnType("longtext");

                    b.Property<string>("task")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.ToTable("camps", (string)null);
                });

            modelBuilder.Entity("Sports.Model.CardsReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcadamyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CardsReports");
                });

            modelBuilder.Entity("Sports.Model.GoalsReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcadamyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Minute")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("goalsReports");
                });

            modelBuilder.Entity("Sports.Model.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<string>("AwayTeamName")
                        .HasColumnType("longtext");

                    b.Property<string>("AwayTeamScore")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<string>("HomeTeamName")
                        .HasColumnType("longtext");

                    b.Property<string>("HomeTeamScore")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MatchStatus")
                        .HasColumnType("longtext");

                    b.Property<string>("Stadium")
                        .HasColumnType("longtext");

                    b.Property<string>("Time")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.ToTable("matches", (string)null);
                });

            modelBuilder.Entity("Sports.Model.Player", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("AcademyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumberShirt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PLayerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Possition")
                        .HasColumnType("longtext");

                    b.Property<bool>("Statu")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("URLImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("URLPassport")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("AcademyId");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("Sports.Model.PlayersReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Essential")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Possition")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Reserve")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("playersReports");
                });

            modelBuilder.Entity("Sports.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademyId")
                        .HasColumnType("int");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AcademyId");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Sports.Model.Tech_AdminReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("TechName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("attribute")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tech_AdminReports");
                });

            modelBuilder.Entity("Sports.Model.Tech_admin", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("AcademyId")
                        .HasColumnType("int");

                    b.Property<string>("AcademyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("URLImage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("URLPassport")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("attribute")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("AcademyId");

                    b.ToTable("Tech_admins");
                });

            modelBuilder.Entity("Sports.Model.Camp", b =>
                {
                    b.HasOne("Sports.Model.Academy", "Academy")
                        .WithMany()
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academy");
                });

            modelBuilder.Entity("Sports.Model.Match", b =>
                {
                    b.HasOne("Sports.Model.Academy", "AwayAcademy")
                        .WithMany()
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sports.Model.Academy", "HomeAcademy")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayAcademy");

                    b.Navigation("HomeAcademy");
                });

            modelBuilder.Entity("Sports.Model.Player", b =>
                {
                    b.HasOne("Sports.Model.Academy", "Academy")
                        .WithMany()
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academy");
                });

            modelBuilder.Entity("Sports.Model.Role", b =>
                {
                    b.HasOne("Sports.Model.Academy", "Academy")
                        .WithMany()
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academy");
                });

            modelBuilder.Entity("Sports.Model.Tech_admin", b =>
                {
                    b.HasOne("Sports.Model.Academy", "Academy")
                        .WithMany()
                        .HasForeignKey("AcademyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Academy");
                });
#pragma warning restore 612, 618
        }
    }
}
